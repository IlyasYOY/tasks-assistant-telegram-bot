// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IlyasYOY/tasks-assistant-tg-bot/internal/handler (interfaces: CommandHandler)
//
// Generated by this command:
//
//	mockgen -typed -package=handler_test -destination=mock_command_handler_test.go . CommandHandler
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandHandler is a mock of CommandHandler interface.
type MockCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommandHandlerMockRecorder
	isgomock struct{}
}

// MockCommandHandlerMockRecorder is the mock recorder for MockCommandHandler.
type MockCommandHandlerMockRecorder struct {
	mock *MockCommandHandler
}

// NewMockCommandHandler creates a new mock instance.
func NewMockCommandHandler(ctrl *gomock.Controller) *MockCommandHandler {
	mock := &MockCommandHandler{ctrl: ctrl}
	mock.recorder = &MockCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandHandler) EXPECT() *MockCommandHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockCommandHandler) Handle(msg *tgbotapi.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandHandlerMockRecorder) Handle(msg any) *MockCommandHandlerHandleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandHandler)(nil).Handle), msg)
	return &MockCommandHandlerHandleCall{Call: call}
}

// MockCommandHandlerHandleCall wrap *gomock.Call
type MockCommandHandlerHandleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandHandlerHandleCall) Return(arg0 error) *MockCommandHandlerHandleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandHandlerHandleCall) Do(f func(*tgbotapi.Message) error) *MockCommandHandlerHandleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandHandlerHandleCall) DoAndReturn(f func(*tgbotapi.Message) error) *MockCommandHandlerHandleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
