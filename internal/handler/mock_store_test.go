// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IlyasYOY/tasks-assistant-tg-bot/internal/handler (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -typed -package=handler_test -destination=mock_store_test.go . Store
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	reflect "reflect"

	task "github.com/IlyasYOY/tasks-assistant-tg-bot/internal/task"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStore) Get(userID int64) (task.TasksText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(task.TasksText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(userID any) *MockStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), userID)
	return &MockStoreGetCall{Call: call}
}

// MockStoreGetCall wrap *gomock.Call
type MockStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetCall) Return(arg0 task.TasksText, arg1 error) *MockStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetCall) Do(f func(int64) (task.TasksText, error)) *MockStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetCall) DoAndReturn(f func(int64) (task.TasksText, error)) *MockStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockStore) Set(userID int64, t task.TasksText) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", userID, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder) Set(userID, t any) *MockStoreSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), userID, t)
	return &MockStoreSetCall{Call: call}
}

// MockStoreSetCall wrap *gomock.Call
type MockStoreSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreSetCall) Return(arg0 error) *MockStoreSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreSetCall) Do(f func(int64, task.TasksText) error) *MockStoreSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreSetCall) DoAndReturn(f func(int64, task.TasksText) error) *MockStoreSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
