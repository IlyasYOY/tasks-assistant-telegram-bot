// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IlyasYOY/tasks-assistant-tg-bot/internal/handler (interfaces: MessageSender)
//
// Generated by this command:
//
//	mockgen -typed -package=handler_test -destination=mock_message_sender_test.go . MessageSender
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
	isgomock struct{}
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageSender) Send(chatID int64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", chatID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMessageSenderMockRecorder) Send(chatID, text any) *MockMessageSenderSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageSender)(nil).Send), chatID, text)
	return &MockMessageSenderSendCall{Call: call}
}

// MockMessageSenderSendCall wrap *gomock.Call
type MockMessageSenderSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageSenderSendCall) Return(arg0 error) *MockMessageSenderSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageSenderSendCall) Do(f func(int64, string) error) *MockMessageSenderSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageSenderSendCall) DoAndReturn(f func(int64, string) error) *MockMessageSenderSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
